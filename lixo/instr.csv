Opcode, Tipo, Mnemonic, Nome, Operação, WE, W_R0, ALU_SRC, ALU_OP, W_SRC, MEM_WE, BRANCH, JUMP, JR
0000, R, brzr, Branch On Zero Register, if (R[ra] == 0) PC = R[rb], 0, 0, 0, 000, 00, 0, 1, 0, 0
0001, I, ji, Jump Immediate, PC = PC + Imm., 0, 0, 0, 000, 00, 0, 0, 1, 0
0010, R, ld, Load R[ra] = M[ R[rb] ], 1, 0, 0, 000, 01, 0, 0, 0, 0
0011, R, st, Store M[ R[rb] ] = R[ra], 0, 0, 0, 000, 00, 1, 0, 0, 0
0100, I, addi, Add Immediate R[0] = R[0] + Imm., 1, 1, 1, 100, 00, 0, 0, 0, 0
0101, R, mov, Move, R[ra] = R[rb], 1, 0, 0, 000, 10, 0 , 0, 0, 0
0110, R, jr, Jump Register, PC = R[ra], 0, 0, 0, 000, 00, 0, 0, 0, 1
0111, I, gpci, Get PC plus immiediate, R[0] = PC + Imm., 1, 1, 0, 000, 11, 0, 0, 0, 0
1000, R, not, Not, R[ra] = not R[rb], 1, 0, 0, 000, 00, 0, 0, 0, 0
1001, R, and, And, R[ra] = R[ra] and R[rb], 1, 0, 0, 001, 00, 0, 0, 0, 0
1010, R, or, Or, R[ra] = R[ra] or R[rb], 1, 0, 0, 010, 00, 0, 0, 0, 0
1011, R, xor, Xor, R[ra] = R[ra] xor R[rb], 1, 0, 0, 011, 00, 0, 0, 0, 0
1100, R, add, Add, R[ra] = R[ra] + R[rb], 1, 0, 0, 100, 00, 0, 0, 0, 0
1101, R, sub, Sub, R[ra] = R[ra] - R[rb], 1, 0, 0, 101, 00, 0, 0, 0, 0
1110, R, slr, Shift Left Register, R[ra] = R[ra] << R[rb], 1, 0, 0, 110, 00, 0, 0, 0, 0
1111, R, srr, Shift Right Register, R[ra] = R[ra] >> R[rb], 1, 0, 0, 111, 00, 0, 0, 0, 0
